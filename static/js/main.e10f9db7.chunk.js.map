{"version":3,"sources":["components/Splashscreen/Splashscreen.js","components/SongView/SongView.js","components/AlbumView/AlbumView.js","components/DetailOverlay/DetailOverlay.js","components/Welcome/Welcome.js","components/AlbumCard/AlbumCard.js","components/AlbumList/AlbumList.js","components/LibraryView/LibraryView.js","App.js","index.js"],"names":["Splashscreen","props","clientId","redirect","className","onClick","window","location","replace","SongView","loadedSong","clearSong","songLengthMins","Math","floor","duration_ms","songLengthSecs","round","toString","length","smallScreen","innerWidth","happySong","valence","acousticSong","acousticness","danceableSong","danceability","energeticSong","energy","instrumentalSong","instrumentalness","liveSong","liveness","spokenSong","speechiness","trueColor","trueColorSolid","falseColor","falseColorSolid","data","labels","datasets","backgroundColor","borderColor","borderWidth","name","options","scales","yAxes","ticks","display","beginAtZero","min","max","xAxes","fontColor","id","style","cursor","AlbumView","loadedAlbum","clearAlbum","getSongInfo","map","item","DetailOverlay","isSongLoaded","Welcome","userProfileUrl","userDisplayName","AlbumCard","image","popularity","getAlbumTracks","src","alt","AlbumList","userAlbums","useEffect","popColor","pops","document","getElementsByClassName","i","score","Number","innerHTML","color","flexWrap","justifyContent","album","LibraryView","Chart","defaults","global","legend","App","useState","code","setCode","token","setToken","setUserDisplayName","setUserProfileUrl","setUserAlbums","setLoadedAlbum","setIsSongLoaded","setLoadedSong","GEToptions","inputToken","method","headers","particlesConfig","require","search","parseUrl","console","log","recievedCode","URLSearchParams","get","getAccessToken","a","fetch","body","JSON","stringify","rawResponse","json","response","access_token","getUserDataOnInit","e","user","display_name","external_urls","spotify","getElementById","classList","remove","add","getUserAlbums","allAlbums","offset","albums","items","concat","handleAlbums","rawAlbumList","albumList","images","url","songId","songName","features","albumId","getElementsByTagName","overflow","rawTracks","tracks","track","link","params","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e10f9db7.chunk.js","sourcesContent":["import React from 'react';\nimport './Splashscreen.css'\n\nconst Splashscreen = (props) => {\n\nconst { clientId, redirect } = props\n\n  return(\n    <div className=\"splash\">\n      <div className={'btn grow'} onClick={()=>window.location.replace(`https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirect}&show_dialog=true&scope=user-read-private%20user-library-read`)}>\n      Connect to Spotify!\n      </div>\n    </div>\n  )\n}\n\nexport default Splashscreen\n","import React from 'react'\nimport { HorizontalBar, Bar } from 'react-chartjs-2'\nimport './SongView.css'\n\nconst SongView = (props) => {\n\n  const { loadedSong, clearSong } = props\n\n  //const pitchTable = ['C','C#/D♭', 'D', 'D#/E♭', 'E', 'F', 'F#/G♭', 'G', 'G#/A♭', 'A', 'A#/B♭', 'B']\n  const songLengthMins = Math.floor((loadedSong.duration_ms / 1000)/60)\n  let songLengthSecs = Math.round((loadedSong.duration_ms / 1000) % 60)\n  if (songLengthSecs.toString().length === 1){ songLengthSecs = `0${songLengthSecs}`}\n\n  \n\n  const smallScreen = (window.innerWidth < 500)\n  const happySong = (loadedSong.valence > 0.5)\n  const acousticSong = (loadedSong.acousticness > 0.4)\n  const danceableSong = (loadedSong.danceability > 0.45)\n  const energeticSong = (loadedSong.energy > 0.4)\n  const instrumentalSong = (loadedSong.instrumentalness > 0.5)\n  const liveSong = (loadedSong.liveness > 0.4)\n  const spokenSong = (loadedSong.speechiness > 0.33)\n\n\n  const trueColor = 'rgba(0, 255, 0, 0.2)'\n  const trueColorSolid = 'rgba(0, 255, 0, 1)'\n\n  const falseColor = 'rgba(255, 84, 84, 0.2)'\n  const falseColorSolid = 'rgba(255, 84, 84, 1)'\n\n  const data = {\n    labels: ['Acousticness', 'Danceability', 'Valence', 'Instrumentalness', 'Energy', 'Liveness', 'Speechiness'],\n    datasets: [\n      {\n       // label: 'Value',\n        data: [\n          loadedSong.acousticness,\n          loadedSong.danceability, \n          loadedSong.valence, \n          loadedSong.instrumentalness, \n          loadedSong.energy, \n          loadedSong.liveness, \n          loadedSong.speechiness\n        ],\n        backgroundColor: [\n          `${acousticSong?trueColor:falseColor}`,\n          `${danceableSong?trueColor:falseColor}`,\n          `${happySong?trueColor:falseColor}`,\n          `${instrumentalSong?trueColor:falseColor}`,\n          `${energeticSong?trueColor:falseColor}`,\n          `${liveSong?trueColor:falseColor}`,\n          `${spokenSong?trueColor:falseColor}`,\n        ],\n        borderColor: [\n          `${acousticSong?trueColorSolid:falseColorSolid}`,\n          `${danceableSong?trueColorSolid:falseColorSolid}`,\n          `${happySong?trueColorSolid:falseColorSolid}`,\n          `${instrumentalSong?trueColorSolid:falseColorSolid}`,\n          `${energeticSong?trueColorSolid:falseColorSolid}`,\n          `${liveSong?trueColorSolid:falseColorSolid}`,\n          `${spokenSong?trueColorSolid:falseColorSolid}`,\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n  const verticalOptions = {\n    \n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            display: true,\n            fontColor: 'white',\n            beginAtZero: true,\n            min: 0,\n            max: 1\n          },\n        },\n      ],\n      xAxes: [\n        {\n          ticks: {\n            display: false,\n            beginAtZero: true,\n            min: 0,\n            max: 1\n          }\n        }\n      ]\n    },\n  }\n\n  const horizontalOptions = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            display: false,\n            beginAtZero: true,\n            min: 0,\n            max: 1\n          },\n        },\n      ],\n      xAxes: [\n        {\n          ticks: {\n            display: true,\n            fontColor: 'white',\n            beginAtZero: true,\n            min: 0,\n            max: 1\n          }\n        }\n      ]\n    },\n  }\n // <div className={'music-info'}>\n  //<h1>Musical Details</h1>\n  //Estimated Key of {pitchTable[loadedSong.key]} <br />\n  //Estimated Modality: {(loadedSong.mode===0)?'Minor':'Major'} <br />\n  //Estimated Time Signature of {loadedSong.time_signature} beats in a bar <br />\n  //Estimated Tempo of {Math.round(loadedSong.tempo)}bpm\n//</div>\n\n  return(\n    <div >\n      <h1 className={'title'}>{loadedSong.name}</h1>\n      <p className={'length'}>{`(${songLengthMins}:${songLengthSecs})`}</p>\n      <div className={'chart'}> \n        {smallScreen?<Bar data={data} options={horizontalOptions}/>:<HorizontalBar data={data} options={verticalOptions} />}\n      </div>\n      <div id={'back-button'} className={`title grow ${smallScreen?'btn-view-small':'btn-view'}`} style={{cursor: 'pointer'}} onClick={clearSong}>\n        BACK\n      </div>\n    \n    </div>\n  )\n}\n\nexport default SongView","import React from 'react';\nimport './AlbumView.css';\n\nconst AlbumView = (props) => {\n  \nconst { loadedAlbum, clearAlbum, getSongInfo } = props\n\n  return (\n    <div className=\"album-tracks\">\n      <div className={'back-btn-to-lib track text-center grow'} onClick={clearAlbum}>\n        BACK\n      </div>\n      \n      {loadedAlbum.map(item => {\n        return <div key={item.id} onClick={()=>{getSongInfo(item.id, item.name)}} className='track text-center grow'>\n                {item.name}  <br />\n               </div>\n      })}\n      \n    </div>\n  )\n\n}\n\nexport default AlbumView","import React from 'react'\nimport SongView from '../SongView/SongView.js';\nimport AlbumView from '../AlbumView/AlbumView.js';\nimport './DetailOverlay.css'\n\nconst DetailOverlay = (props) => {\n\n  const {isSongLoaded, loadedSong, loadedAlbum, getSongInfo, clearAlbum, clearSong } = props\n\n  return(\n    <div className={'overlay hide'}>\n      {isSongLoaded\n      ? <SongView loadedSong={loadedSong} clearSong={clearSong}/>\n      : <AlbumView loadedAlbum={loadedAlbum} getSongInfo={getSongInfo} clearAlbum={clearAlbum}/>\n      }      \n    </div>\n  )\n}\n\nexport default DetailOverlay","import React from 'react';\nimport './Welcome.css'\n\n\n\nconst Welcome = (props) => {\n\n  // eslint-disable-next-line\n  const { userProfileUrl, userDisplayName } = props\n\n  return(\n      <div className='welcome'>\n        <h1 id={'welcome-text'} className={'hide-welcome'}>\n          Welcome, {userDisplayName}.<br />\n        </h1>\n      </div>\n  )\n}\n\nexport default Welcome","import React from 'react';\nimport './AlbumCard.css'\n\nconst AlbumCard = (props) => {\n\nconst { id, name, image, popularity, getAlbumTracks } = props\n\n  return(\n    <div onClick={()=>{getAlbumTracks(id)}} className=\"grow br2 ba dark-gray b--black-10 mv2 mv4-ns w-50 ma3-ns w-20-ns center card\">\n      <img  src={image} className=\"db w-100 br2 br--top image\" alt=\"Album art\"/>\n      <div className=\"pa2 ph3-ns pb3-ns background \">\n        <div className=\"dt w-100 mt1 \">\n          <div className=\"dtc w-90 \">\n            <h1 className=\"f5 f4-ns mv0 white\">{name}</h1>\n          </div>\n          <div className=\"dtc tr w-10\">\n            <h2 className=\"f5 mv0 popularity\">{popularity}</h2>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AlbumCard\n","import { React, useEffect } from 'react';\nimport AlbumCard from '../AlbumCard/AlbumCard.js';\nimport './AlbumList.css';\n\nconst AlbumList = (props) => {\n\nconst { userAlbums, getAlbumTracks} = props;\n\nuseEffect(()=>{\n  if (userAlbums){popColor()}\n})\n\n//run through the album cards and set the color of the popularity text based on score\nconst popColor = () => {\n  //set thresholds\n  const high = 75\n  const low = 25\n  let pops = document.getElementsByClassName('popularity')\n\n  for (let i=0; i<pops.length; i++){\n    let score = Number(pops[i].innerHTML)\n    if (score >= high){pops[i].style.color = \"green\"}\n    else if (score >= low){pops[i].style.color = \"darkorange\"}\n    else {pops[i].style.color = \"red\"}  \n  }\n}\n\n//if there are albums loaded, loop through them and display a card for each\n//if not, do nothing\nif (userAlbums) {\n    return(\n        <div className={`album-list animate`} style={{display: 'flex',flexWrap: 'wrap',justifyContent: 'space-around'}}>\n            {userAlbums.map(album => {\n                return <AlbumCard key={album.id} id={album.id} name={album.name} image={album.image} popularity={album.popularity} getAlbumTracks={getAlbumTracks}/>\n            })}\n            \n        </div>\n        \n    )\n} else {\n    return(null)\n  } \n}\n\nexport default AlbumList","import React from 'react'\nimport Welcome from '../Welcome/Welcome.js';\nimport AlbumList from '../AlbumList/AlbumList.js';\n\nconst LibraryView = (props) => {\n\n  const { userDisplayName, userProfileUrl, userAlbums, getAlbumTracks } = props\n\n  return(\n    <div className={'library-view'}>\n      <Welcome userDisplayName={userDisplayName} userProfileUrl={userProfileUrl}/>\n      <AlbumList userAlbums={userAlbums} getAlbumTracks={getAlbumTracks}/>        \n    </div>\n  )\n}\n\nexport default LibraryView","import { useState, useEffect } from 'react';\nimport Splashscreen from './components/Splashscreen/Splashscreen.js';\nimport DetailOverlay from './components/DetailOverlay/DetailOverlay.js';\nimport LibraryView from './components/LibraryView/LibraryView.js';\nimport Particles from 'react-particles-js';\nimport './App.css';\nimport 'tachyons';\nimport { Chart } from \"react-chartjs-2\";  \nChart.defaults.global.legend.display = false;\n\nconst clientId = 'ebcbc13ca3b34ed6a4cf0bf4d7579df9';\nconst redirect = 'https%3A%2F%2Fwww.jamescockayne.co.uk%2Fspotify-app%2F';\n\nconst App = () => {\n\n  //hooks for state\n  const [code, setCode] = useState(null)\n  const [token, setToken] = useState(null)\n  const [userDisplayName, setUserDisplayName] = useState('Loading...')\n  const [userProfileUrl, setUserProfileUrl] = useState(null)\n  const [userAlbums, setUserAlbums] = useState(null)\n  const [loadedAlbum, setLoadedAlbum] = useState([])\n  const [isSongLoaded, setIsSongLoaded] = useState(false)\n  const [loadedSong, setLoadedSong] = useState({})\n\n  //global options parameter for GET requests, take a token, and return an object with the right header\n  //defaults to using the token from app state, but can be custom\n  const GEToptions = (inputToken = token) => {\n    return ({\n      method: 'GET',\n      headers: {'Authorization': `Bearer ${inputToken}`}\n    })\n  }\n\n  //parameters for the particles background\n  const particlesConfig = require('./particlesjs-config.json')\n\n  //request for the url to be parsed if there is a query string on page load\n  useEffect(() => {\n    (window.location.search !== \"\")?parseUrl():console.log('Please link with Spotify') // eslint-disable-next-line\n  },[])\n\n  //grab the code parameter from the query string and pass it to getAccessToken()\n  const parseUrl = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const recievedCode = urlParams.get('code')\n    setCode(recievedCode)\n    getAccessToken(recievedCode)\n  }\n\n  //send the code to the backend and update the state with the results\n  const getAccessToken = async (recievedCode) => {\n    let rawResponse = await fetch('https://spotify-test-project.herokuapp.com', {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        code: recievedCode,\n        clientId: clientId,\n        redirect: redirect\n      })\n    })\n\n    let response = await rawResponse.json()\n\n    try {\n      setToken(response.access_token)\n      \n      //get the user's profile with the token we just recieved, because the default value of token here comes back as blank\n      getUserDataOnInit(response.access_token)  \n    } catch(e){console.log(e)}\n  }\n\n  //make a request for profile data and update state with basic details\n  const getUserDataOnInit = async (inputToken) => {\n    try {\n      let response = await fetch('https://api.spotify.com/v1/me', GEToptions(inputToken))\n      let user = await response.json()  \n      setUserDisplayName(user.display_name)\n      setUserProfileUrl(user.external_urls.spotify)\n      document.getElementById('welcome-text').classList.remove('hide-welcome')\n      document.getElementById('welcome-text').classList.add('fade-in')\n      getUserAlbums(inputToken)\n    } catch(e){console.log(e)}  \n\n  }\n\n  const getUserAlbums = async (inputToken) => {\n    //start with no albums, and make the first request from offset=0\n    let allAlbums = []\n    let offset = 0\n\n    //spotify limits album requests to 50 at a time, so...\n    //if the number of albums recieved so far is a multiple of 50, make another request for the next 50, by specifying the offset\n    //Eventually the albums stop coming in 50s and we are done\n    //For the edge case that the final number required is a multiple of 50, we check if each batch is blank. If so, we are done. \n    while ((allAlbums.length % 50) === 0){\n      let response = await fetch(`https://api.spotify.com/v1/me/albums?offset=${offset}&limit=50`, GEToptions(inputToken))\n      let albums = await response.json()\n      if (albums.items.length === 0){break}\n      allAlbums = allAlbums.concat(albums.items)\n      offset += 50\n    } \n\n    //process the complete album list\n    handleAlbums(allAlbums)\n  }\n\n  const handleAlbums = (rawAlbumList) => {\n    let albumList = rawAlbumList.map(item => {\n      return {\n        name: item.album.name,\n        image: item.album.images[0].url,\n        popularity: item.album.popularity,\n        id: item.album.id\n      } \n    })\n    setUserAlbums(albumList)\n  }\n\n  const getSongInfo = async (songId, songName) => {\n    let response = await fetch(`https://api.spotify.com/v1/audio-features/${songId}`, GEToptions())\n    let features = await response.json()\n    features.name = songName\n    setLoadedSong(features)\n    setIsSongLoaded(true)\n  }\n\n  const getAlbumTracks = async (albumId) => {\n    document.getElementsByTagName('html')[0].style.overflow = 'hidden'\n\n    //make the request for the album whose id has been passed\n    let response = await fetch(`https://api.spotify.com/v1/albums/${albumId}/tracks`, GEToptions())\n    let rawTracks = await response.json()\n\n    //process the response into a simpler array\n    let tracks = rawTracks.items.map(track => {\n      return {\n        name: track.name,\n        length: track.duration_ms,\n        id: track.id,\n        link: track.external_urls.spotify\n      }\n    })\n    setLoadedAlbum(tracks)\n    document.getElementsByClassName('overlay')[0].classList.add('show')\n  }\n\n  //hide the overlay to go back to library view\n  const clearAlbum = () => {\n    document.getElementsByClassName('overlay')[0].classList.remove('show')\n    document.getElementsByTagName('html')[0].style.overflow = 'visible'\n  }\n\n  const clearSong = () => {\n    setIsSongLoaded(false)\n  }\n\n  //if there is no code stored, then the user must have not have logged in, or has refused to grant access, so show them a 'connect' button\n  //else, they must have logged in, so show the app\n  return (\n    <div className={'container'}>\n      <Particles params={particlesConfig} className='particles'/>\n      {(code===null)\n        ? <Splashscreen clientId={clientId} redirect={redirect}/>\n        : <div className=\"App\">\n            <DetailOverlay isSongLoaded={isSongLoaded} loadedSong={loadedSong} loadedAlbum={loadedAlbum} getSongInfo={getSongInfo} clearAlbum={clearAlbum} clearSong={clearSong}/>\n            <LibraryView userDisplayName={userDisplayName} userProfileUrl={userProfileUrl} userAlbums={userAlbums} getAlbumTracks={getAlbumTracks}/> \n          </div>     \n      }   \n    </div>\n  )  \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}