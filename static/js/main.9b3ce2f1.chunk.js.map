{"version":3,"sources":["components/AlbumCard/AlbumCard.js","components/AlbumList/AlbumList.js","components/Splashscreen/Splashscreen.js","components/Welcome/Welcome.js","components/AlbumView/AlbumView.js","App.js","index.js"],"names":["AlbumCard","props","id","name","image","popularity","getAlbumTracks","onClick","className","src","alt","AlbumList","userAlbums","useEffect","popColor","pops","document","getElementsByClassName","i","length","score","Number","innerHTML","style","color","display","flexWrap","justifyContent","map","album","onLoad","Splashscreen","clientId","redirect","window","location","replace","Welcome","userProfileUrl","userDisplayName","href","AlbumView","loadedAlbum","item","link","App","useState","code","setCode","token","setToken","setRefreshToken","setExpiry","setRequestTime","setUserDisplayName","setUserProduct","setUserProfileUrl","setUserAlbums","isAlbumLoaded","setIsAlbumLoaded","setLoadedAlbum","GEToptions","inputToken","method","headers","search","parseUrl","console","log","recievedCode","URLSearchParams","get","getAccessToken","a","fetch","body","JSON","stringify","rawResponse","json","response","Date","expires_in","access_token","refresh_token","getUserDataOnInit","e","user","display_name","product","external_urls","spotify","getUserAlbums","allAlbums","offset","albums","items","concat","handleAlbums","rawAlbumList","albumList","images","url","albumId","rawTracks","tracks","track","duration_ms","ReactDOM","render","StrictMode","getElementById"],"mappings":"mPAuBeA,EArBG,SAACC,GAAW,IAEtBC,EAAgDD,EAAhDC,GAAIC,EAA4CF,EAA5CE,KAAMC,EAAsCH,EAAtCG,MAAOC,EAA+BJ,EAA/BI,WAAYC,EAAmBL,EAAnBK,eAEnC,OACE,sBAAKC,QAAS,WAAKD,EAAeJ,IAAMM,UAAU,qEAAlD,UACE,qBAAMC,IAAKL,EAAOI,UAAU,uBAAuBE,IAAI,cACvD,qBAAKF,UAAU,oBAAf,SACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,WAAf,SACE,oBAAIA,UAAU,eAAd,SAA8BL,MAEhC,qBAAKK,UAAU,cAAf,SACE,oBAAIA,UAAU,oBAAd,SAAmCH,eC2BhCM,EAvCG,SAACV,GAAW,IAEtBW,EAA+BX,EAA/BW,WAAYN,EAAmBL,EAAnBK,eAEpBO,qBAAU,WACJD,GAAYE,OAIlB,IAAMA,EAAW,WAMf,IAJA,IAEIC,EAAOC,SAASC,uBAAuB,cAElCC,EAAE,EAAGA,EAAEH,EAAKI,OAAQD,IAAI,CAC/B,IAAIE,EAAQC,OAAON,EAAKG,GAAGI,WACRP,EAAKG,GAAGK,MAAMC,MAA7BJ,GANO,GAM8B,QAChCA,GANC,GAMmC,aACjB,QAMhC,OAAIR,EAEI,sBAAKV,GAAG,YAAYqB,MAAO,CAACE,QAAS,OAAOC,SAAU,OAAOC,eAAgB,gBAA7E,UACKf,EAAWgB,KAAI,SAAAC,GACZ,OAAO,cAAC,EAAD,CAA0B3B,GAAI2B,EAAM3B,GAAIC,KAAM0B,EAAM1B,KAAMC,MAAOyB,EAAMzB,MAAOC,WAAYwB,EAAMxB,WAAYC,eAAgBA,GAA5GuB,EAAM3B,OAEjC,qBAAK4B,OAAQhB,OAId,MCzBIiB,EAXM,SAAC9B,GAAW,IAEzB+B,EAAuB/B,EAAvB+B,SAAUC,EAAahC,EAAbgC,SAEhB,OACE,qBAAKzB,UAAU,MAAf,SACI,wBAAQe,MAAO,CAAC,OAAU,OAAQhB,QAAS,kBAAI2B,OAAOC,SAASC,QAAhB,2DAA4EJ,EAA5E,4CAAwHC,EAAxH,oEAA/C,oCCOOI,EAbC,SAACpC,GAAW,IAElBqC,EAAoCrC,EAApCqC,eAAgBC,EAAoBtC,EAApBsC,gBAExB,OACI,8BACE,4CACY,mBAAGC,KAAMF,EAAT,SAA0BC,IAAoB,6BCSnDE,EAhBG,SAACxC,GAAW,IAEpByC,EAAgBzC,EAAhByC,YAER,OACE,qBAAKlC,UAAU,eAAf,SACGkC,EAAYd,KAAI,SAAAe,GACf,OAAO,yCACQA,EAAKxC,KADb,aAC6BwC,EAAKxB,OADlC,OAC6C,mBAAGqB,KAAMG,EAAKC,KAAd,6BAAuC,yBAD1ED,EAAKzC,UCDxB8B,G,YAAW,oCACXC,EAAW,yDAiJFY,EA/IH,WAAM,MAGQC,mBAAS,MAHjB,mBAGTC,EAHS,KAGHC,EAHG,OAIUF,mBAAS,MAJnB,mBAITG,EAJS,KAIFC,EAJE,OAKwBJ,mBAAS,MALjC,mBAKKK,GALL,aAMYL,mBAAS,MANrB,mBAMDM,GANC,aAOsBN,mBAAS,MAP/B,mBAOIO,GAPJ,aAQ8BP,mBAAS,cARvC,mBAQTP,EARS,KAQQe,EARR,OASsBR,mBAAS,MAT/B,mBASIS,GATJ,aAU4BT,mBAAS,MAVrC,mBAUTR,EAVS,KAUOkB,EAVP,OAWoBV,mBAAS,MAX7B,mBAWTlC,EAXS,KAWG6C,EAXH,OAY0BX,oBAAS,GAZnC,mBAYTY,EAZS,KAYMC,EAZN,OAasBb,mBAAS,IAb/B,mBAaTJ,EAbS,KAaIkB,EAbJ,KAiBVC,EAAa,WAAyB,IAAxBC,EAAuB,uDAAVb,EAC/B,MAAQ,CACNc,OAAQ,MACRC,QAAS,CAAC,cAAgB,UAAhB,OAA2BF,MAKzCjD,qBAAU,WACoB,KAA3BqB,OAAOC,SAAS8B,OAAeC,IAAWC,QAAQC,IAAI,8BACvD,IAGF,IAAMF,EAAW,WACf,IACMG,EADY,IAAIC,gBAAgBpC,OAAOC,SAAS8B,QACvBM,IAAI,QACnCvB,EAAQqB,GACRG,EAAeH,IAIXG,EAAc,uCAAG,WAAOH,GAAP,iBAAAI,EAAA,sEACGC,MAAM,6CAA8C,CAC1EX,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BW,KAAMC,KAAKC,UAAU,CACnB9B,KAAMsB,EACNrC,SAAUA,EACVC,SAAUA,MAPO,cACjB6C,EADiB,gBAWAA,EAAYC,OAXZ,OAWjBC,EAXiB,OAarB,IACE3B,EAAe,IAAI4B,MACnB7B,EAAU4B,EAASE,YACnBhC,EAAS8B,EAASG,cAClBhC,EAAgB6B,EAASI,eAEzBC,GAAkBL,EAASG,cAC3B,MAAMG,GAAGnB,QAAQC,IAAIkB,GApBF,2CAAH,sDAwBdD,GAAiB,uCAAG,WAAOvB,GAAP,iBAAAW,EAAA,+EAEDC,MAAM,gCAAiCb,EAAWC,IAFjD,cAElBkB,EAFkB,gBAGLA,EAASD,OAHJ,OAGlBQ,EAHkB,OAItBjC,EAAmBiC,EAAKC,cACxBjC,EAAegC,EAAKE,SACpBjC,EAAkB+B,EAAKG,cAAcC,SANf,kDAObxB,QAAQC,IAAR,MAPa,0DAAH,sDAUjBwB,GAAa,uCAAG,kCAAAnB,EAAA,sDAEhBoB,EAAY,GACZC,EAAS,EAHO,UASZD,EAAU1E,OAAS,KAAQ,EATf,iCAUGuD,MAAM,+CAAD,OAAgDoB,EAAhD,aAAmEjC,KAV3E,cAUdmB,EAVc,gBAWCA,EAASD,OAXV,UAYU,KADxBgB,EAXc,QAYPC,MAAM7E,OAZC,qDAalB0E,EAAYA,EAAUI,OAAOF,EAAOC,OACpCF,GAAU,GAdQ,uBAkBpBI,GAAaL,GAlBO,4CAAH,qDAqBbK,GAAe,SAACC,GACpB,IAAIC,EAAYD,EAAavE,KAAI,SAAAe,GAC/B,MAAO,CACLxC,KAAMwC,EAAKd,MAAM1B,KACjBC,MAAOuC,EAAKd,MAAMwE,OAAO,GAAGC,IAC5BjG,WAAYsC,EAAKd,MAAMxB,WACvBH,GAAIyC,EAAKd,MAAM3B,OAGnBuD,EAAc2C,IAGV9F,GAAc,uCAAG,WAAOiG,GAAP,mBAAA9B,EAAA,6DACrBN,QAAQC,IAAI,4BADS,SAIAM,MAAM,qCAAD,OAAsC6B,EAAtC,WAAwD1C,KAJ7D,cAIjBmB,EAJiB,gBAKCA,EAASD,OALV,OAKjByB,EALiB,OAQjBC,EAASD,EAAUR,MAAMpE,KAAI,SAAA8E,GAC/B,MAAO,CACLvG,KAAMuG,EAAMvG,KACZgB,OAAQuF,EAAMC,YACdzG,GAAIwG,EAAMxG,GACV0C,KAAM8D,EAAMhB,cAAcC,YAK9B/B,EAAe6C,GACf9C,GAAiB,GAnBI,4CAAH,sDAsBpB,OAGS,OAAPZ,EACE,cAAC,EAAD,CAAcf,SAAUA,EAAUC,SAAUA,IAC3CyB,EACC,cAAC,EAAD,CAAWhB,YAAaA,IACxB,sBAAKlC,UAAU,MAAf,UACE,cAAC,EAAD,CAAS+B,gBAAiBA,EAAiBD,eAAgBA,IAC3D,wBAAQf,MAAO,CAAC,OAAU,MAAOhB,QAASqF,GAA1C,yBACA,wBAAQrE,MAAO,CAAC,OAAU,MAAOhB,QAAS,WAAKD,GAAeM,EAAW,GAAGV,KAA5E,8BACA,cAAC,EAAD,CAAWU,WAAYA,EAAYN,eAAgBA,SChJ7DsG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9F,SAAS+F,eAAe,W","file":"static/js/main.9b3ce2f1.chunk.js","sourcesContent":["import React from 'react';\n\nconst AlbumCard = (props) => {\n\nconst { id, name, image, popularity, getAlbumTracks } = props\n\n  return(\n    <div onClick={()=>{getAlbumTracks(id)}} className=\"br2 ba dark-gray b--black-10 mv2 mv4-ns w-50 ma3-ns w-20-ns center\">\n      <img  src={image} className=\"db w-100 br2 br--top\" alt=\"Album art\"/>\n      <div className=\"pa2 ph3-ns pb3-ns\">\n        <div className=\"dt w-100 mt1\">\n          <div className=\"dtc w-90\">\n            <h1 className=\"f5 f4-ns mv0\">{name}</h1>\n          </div>\n          <div className=\"dtc tr w-10\">\n            <h2 className=\"f5 mv0 popularity\">{popularity}</h2>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AlbumCard\n","import { React, useEffect } from 'react';\nimport AlbumCard from '../AlbumCard/AlbumCard.js';\n\nconst AlbumList = (props) => {\n\nconst { userAlbums, getAlbumTracks } = props;\n\nuseEffect(()=>{\n  if (userAlbums){popColor()}\n})\n\n//run through the album cards and set the color of the popularity text based on score\nconst popColor = () => {\n  //set thresholds\n  const high = 75\n  const low = 25\n  let pops = document.getElementsByClassName('popularity')\n\n  for (let i=0; i<pops.length; i++){\n    let score = Number(pops[i].innerHTML)\n    if (score >= high){pops[i].style.color = \"green\"}\n    else if (score >= low){pops[i].style.color = \"darkorange\"}\n    else {pops[i].style.color = \"red\"}  \n  }\n}\n\n//if there are albums loaded, loop through them and display a card for each\n//if not, do nothing\nif (userAlbums) {\n    return(\n        <div id='AlbumList' style={{display: 'flex',flexWrap: 'wrap',justifyContent: 'space-around'}}>\n            {userAlbums.map(album => {\n                return <AlbumCard key={album.id} id={album.id} name={album.name} image={album.image} popularity={album.popularity} getAlbumTracks={getAlbumTracks}/>\n            })}\n            <div onLoad={popColor}></div>\n        </div>\n    )\n} else {\n    return(null)\n}\n}\n\nexport default AlbumList","import React from 'react';\n\nconst Splashscreen = (props) => {\n\nconst { clientId, redirect } = props\n\n  return(\n    <div className=\"App\">\n        <button style={{'margin': '10%'}} onClick={()=>window.location.replace(`https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirect}&show_dialog=false&scope=user-read-private%20user-library-read`)}>Connect to Spotify!</button>\n    </div>\n  )\n}\n\nexport default Splashscreen\n","import {React} from 'react';\n\nconst Welcome = (props) => {\n\n  const { userProfileUrl, userDisplayName } = props\n\n  return(\n      <div >\n        <h1>\n          Hi there, <a href={userProfileUrl}>{userDisplayName}</a><br />\n        </h1>\n      </div>\n  )\n}\n\nexport default Welcome","import React from 'react';\n\nconst AlbumView = (props) => {\n  \n  const { loadedAlbum } = props\n\n  return (\n    <div className=\"Album Tracks\">\n      {loadedAlbum.map(item => {\n        return <div key={item.id}>\n                name: {item.name}, length: {item.length}ms, <a href={item.link}>view on spotify</a><br />\n               </div>\n      })}\n    </div>\n  )\n\n}\n\nexport default AlbumView","import { useState, useEffect } from 'react';\nimport AlbumList from './components/AlbumList/AlbumList.js';\nimport Splashscreen from './components/Splashscreen/Splashscreen.js';\nimport Welcome from './components/Welcome/Welcome.js';\nimport AlbumView from './components/AlbumView/AlbumView.js'\nimport './App.css';\nimport 'tachyons';\n\nconst clientId = 'ebcbc13ca3b34ed6a4cf0bf4d7579df9';\nconst redirect = 'https%3A%2F%2Fwww.jamescockayne.co.uk%2Fspotify-app%2F';\n\nconst App = () => {\n\n  //hooks for state\n  const [code, setCode] = useState(null)\n  const [token, setToken] = useState(null) // eslint-disable-next-line \n  const [refreshToken, setRefreshToken] = useState(null) // eslint-disable-next-line \n  const [expiry, setExpiry] = useState(null) // eslint-disable-next-line \n  const [requestTime, setRequestTime] = useState(null)\n  const [userDisplayName, setUserDisplayName] = useState('Loading...') // eslint-disable-next-line \n  const [userProduct, setUserProduct] = useState(null)\n  const [userProfileUrl, setUserProfileUrl] = useState(null)\n  const [userAlbums, setUserAlbums] = useState(null)\n  const [isAlbumLoaded, setIsAlbumLoaded] = useState(false)\n  const [loadedAlbum, setLoadedAlbum] = useState({})\n\n  //global options parameter for GET requests, take a token, and return an object with the right header\n  //defaults to using the token from app state, but can be custom\n  const GEToptions = (inputToken = token) => {\n    return ({\n      method: 'GET',\n      headers: {'Authorization': `Bearer ${inputToken}`}\n    })\n  }\n\n  //request for the url to be parsed if there is a query string on page load\n  useEffect(() => {\n    (window.location.search !== \"\")?parseUrl():console.log('Please link with Spotify') // eslint-disable-next-line\n  },[])\n\n  //grab the code parameter from the query string and pass it to getAccessToken()\n  const parseUrl = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const recievedCode = urlParams.get('code')\n    setCode(recievedCode)\n    getAccessToken(recievedCode)\n  }\n\n  //send the code to the backend and update the state with the results\n  const getAccessToken = async (recievedCode) => {\n    let rawResponse = await fetch('https://spotify-test-project.herokuapp.com', {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        code: recievedCode,\n        clientId: clientId,\n        redirect: redirect\n      })\n    })\n\n    let response = await rawResponse.json()\n\n    try {\n      setRequestTime(new Date())\n      setExpiry(response.expires_in)\n      setToken(response.access_token)\n      setRefreshToken(response.refresh_token) \n      //get the user's profile with the token we just recieved, because the default value of token here comes back as blank\n      getUserDataOnInit(response.access_token)  \n    } catch(e){console.log(e)}\n  }\n\n  //make a request for profile data and update state with basic details\n  const getUserDataOnInit = async (inputToken) => {\n    try {\n      let response = await fetch('https://api.spotify.com/v1/me', GEToptions(inputToken))\n      let user = await response.json()  \n      setUserDisplayName(user.display_name)\n      setUserProduct(user.product)\n      setUserProfileUrl(user.external_urls.spotify)\n    } catch(e){console.log(e)}  \n  }\n\n  const getUserAlbums = async () => {\n    //start with no albums, and make the first request from offset=0\n    let allAlbums = []\n    let offset = 0\n\n    //spotify limits album requests to 50 at a time, so...\n    //if the number of albums is a multiple of 50, make another request for the next 50, by specifying the offset\n    //Eventually the albums stop coming in 50s and we are done\n    //For the edge case that the number required is a multiple of 50, we check if each batch is blank. If so, we are done. \n    while ((allAlbums.length % 50) === 0){\n      let response = await fetch(`https://api.spotify.com/v1/me/albums?offset=${offset}&limit=50`, GEToptions())\n      let albums = await response.json()\n      if (albums.items.length === 0){break}\n      allAlbums = allAlbums.concat(albums.items)\n      offset += 50\n    } \n\n    //process the complete album list\n    handleAlbums(allAlbums)\n  }\n\n  const handleAlbums = (rawAlbumList) => {\n    let albumList = rawAlbumList.map(item => {\n      return {\n        name: item.album.name,\n        image: item.album.images[0].url,\n        popularity: item.album.popularity,\n        id: item.album.id\n      } \n    })\n    setUserAlbums(albumList)\n  }\n\n  const getAlbumTracks = async (albumId) => {\n    console.log('running getAlbumTracks()')\n    \n    //make the request for the album whose id has been passed\n    let response = await fetch(`https://api.spotify.com/v1/albums/${albumId}/tracks`, GEToptions())\n    let rawTracks = await response.json()\n\n    //process the response into a simpler array\n    let tracks = rawTracks.items.map(track => {\n      return {\n        name: track.name,\n        length: track.duration_ms,\n        id: track.id,\n        link: track.external_urls.spotify\n      }\n    })\n\n    //update state\n    setLoadedAlbum(tracks)\n    setIsAlbumLoaded(true)\n  }\n\n  return (\n    //if there is no code stored, then the user must have not have logged in, or has refused to grant access, so show them a 'connect' button\n    //else, they must have logged in, so show the app\n    code===null\n    ? <Splashscreen clientId={clientId} redirect={redirect}/>\n    : (isAlbumLoaded)\n      ? <AlbumView loadedAlbum={loadedAlbum}/>\n      : <div className=\"App\">\n          <Welcome userDisplayName={userDisplayName} userProfileUrl={userProfileUrl}/>\n          <button style={{'margin': '3%'}} onClick={getUserAlbums}>Get Albums!</button>\n          <button style={{'margin': '3%'}} onClick={()=>{getAlbumTracks(userAlbums[0].id)}}>get album tracks</button>\n          <AlbumList userAlbums={userAlbums} getAlbumTracks={getAlbumTracks}/>\n        </div>\n  )  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}