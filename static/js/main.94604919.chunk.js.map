{"version":3,"sources":["components/AlbumCard/AlbumCard.js","components/AlbumList/AlbumList.js","components/Splashscreen/Splashscreen.js","components/Welcome/Welcome.js","App.js","index.js"],"names":["AlbumCard","props","name","image","popularity","className","src","alt","AlbumList","userAlbums","console","log","id","style","display","flexWrap","justifyContent","map","album","Splashscreen","clientId","redirect","onClick","window","location","replace","Welcome","userProfileUrl","userDisplayName","href","App","useState","code","setCode","token","setToken","setRefreshToken","setExpiry","setRequestTime","setUserDisplayName","setUserProduct","setUserProfileUrl","setUserAlbums","GEToptions","inputToken","method","headers","useEffect","search","parseUrl","recievedCode","URLSearchParams","get","getAccessToken","a","fetch","body","JSON","stringify","rawResponse","json","response","Date","expires_in","access_token","refresh_token","getUserDataOnInit","e","user","display_name","product","external_urls","spotify","getUserAlbums","allAlbums","offset","length","albums","items","concat","handleAlbums","rawAlbumList","albumList","item","images","url","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94604919.chunk.js","sourcesContent":["import React from 'react';\n\nconst AlbumCard = (props) => {\n\nconst { name, image, popularity } = props\n\n  return(\n    <div className=\"br2 ba dark-gray b--black-10 mv2 mv4-ns w-50 ma3-ns w-20-ns center\">\n      <img  src={image} className=\"db w-100 br2 br--top\" alt=\"Album art\"/>\n      <div className=\"pa2 ph3-ns pb3-ns\">\n        <div className=\"dt w-100 mt1\">\n          <div className=\"dtc\">\n            <h1 className=\"f5 f4-ns mv0\">{name}</h1>\n          </div>\n          <div className=\"dtc tr\">\n            <h2 className=\"f5 mv0\">{popularity}</h2>\n          </div>\n        </div>\n        <p className=\"f6 lh-copy measure mt2 mid-gray\">\n          This is an album\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default AlbumCard\n","import React from 'react';\nimport AlbumCard from '../AlbumCard/AlbumCard.js';\n\nconst AlbumList = (props) => {\n\nconst { userAlbums } = props;\n\n    //if there are albums loaded, loop through them and display a card for each\n    //if not, do nothing\n    if (userAlbums) {\n        console.log('from the list component', userAlbums)\n        return(\n            <div id='AlbumList' style={{display: 'flex',flexWrap: 'wrap',justifyContent: 'space-around'}}>\n                {userAlbums.map(album => {\n                    return <AlbumCard key={album.id} name={album.name} image={album.image} popularity={album.popularity}/>\n                })}\n            </div>\n        )\n    } else {\n        return(null)\n    }\n}\n\nexport default AlbumList","import React from 'react';\n\nconst Splashscreen = (props) => {\n\nconst { clientId, redirect } = props\n\n  return(\n    <div className=\"App\">\n        <button style={{'margin': '10%'}} onClick={()=>window.location.replace(`https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirect}&show_dialog=true&scope=user-read-private%20user-library-read`)}>Connect to Spotify!</button>\n    </div>\n  )\n}\n\nexport default Splashscreen\n","import {React} from 'react';\n\nconst Welcome = (props) => {\n\n  const { userProfileUrl, userDisplayName } = props\n\n  return(\n      <div >\n        <h1>\n          Hi there, <a href={userProfileUrl}>{userDisplayName}</a><br />\n        </h1>\n      </div>\n  )\n}\n\nexport default Welcome","import { useState, useEffect } from 'react';\nimport AlbumList from './components/AlbumList/AlbumList.js'\nimport Splashscreen from './components/Splashscreen/Splashscreen.js'\nimport Welcome from './components/Welcome/Welcome.js'\nimport './App.css';\nimport 'tachyons';\n\nconst clientId = 'ebcbc13ca3b34ed6a4cf0bf4d7579df9';\nconst redirect = 'http%3A%2F%2Fwww.jamescockayne.co.uk%2Fspotify-app%2F';\n\nconst App = () => {\n\n  //hooks for state\n  const [code, setCode] = useState(null)\n  const [token, setToken] = useState(null) // eslint-disable-next-line \n  const [refreshToken, setRefreshToken] = useState(null) // eslint-disable-next-line \n  const [expiry, setExpiry] = useState(null) // eslint-disable-next-line \n  const [requestTime, setRequestTime] = useState(null)\n  const [userDisplayName, setUserDisplayName] = useState('Loading...') // eslint-disable-next-line \n  const [userProduct, setUserProduct] = useState(null)\n  const [userProfileUrl, setUserProfileUrl] = useState(null)\n  const [userAlbums, setUserAlbums] = useState(null)\n\n  //global options parameter for GET requests, take a token, and return an object with the right header\n  //defaults to using the token from app state, but can be custom\n  const GEToptions = (inputToken = token) => {\n    return ({\n      method: 'GET',\n      headers: {'Authorization': `Bearer ${inputToken}`}\n    })\n  }\n\n  //request for the url to be parsed if there is a query string on page load\n  useEffect(() => {\n    (window.location.search !== \"\")?parseUrl():console.log('Please link with Spotify') // eslint-disable-next-line\n  },[])\n\n  //grab the code parameter from the query string and pass it to getAccessToken()\n  const parseUrl = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const recievedCode = urlParams.get('code')\n    setCode(recievedCode)\n    getAccessToken(recievedCode)\n  }\n\n  //send the code to the backend and update the state with the results\n  const getAccessToken = async (recievedCode) => {\n    let rawResponse = await fetch('https://spotify-test-project.herokuapp.com', {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        code: recievedCode,\n        clientId: clientId,\n        redirect: redirect\n      })\n    })\n\n    let response = await rawResponse.json()\n\n    try {\n      setRequestTime(new Date())\n      setExpiry(response.expires_in)\n      setToken(response.access_token)\n      setRefreshToken(response.refresh_token) \n      //get the user's profile with the token we just recieved, because the default value of token here comes back as blank\n      getUserDataOnInit(response.access_token)  \n    } catch(e){console.log(e)}\n  }\n\n  //make a request for profile data and update state with basic details\n  const getUserDataOnInit = async (inputToken) => {\n    try {\n      let response = await fetch('https://api.spotify.com/v1/me', GEToptions(inputToken))\n      let user = await response.json()  \n      setUserDisplayName(user.display_name)\n      setUserProduct(user.product)\n      setUserProfileUrl(user.external_urls.spotify)\n    } catch(e){console.log(e)}  \n  }\n\n  const getUserAlbums = async () => {\n    //start with no albums, and make the first request from offset=0\n    let allAlbums = []\n    let offset = 0\n\n    //spotify limits album requests to 50 at a time, so...\n    //if the number of albums is a multiple of 50, make another request for the next 50, by specifying the offset\n    //Eventually the albums stop coming in 50s and we are done\n    //For the edge case that the number required is a multiple of 50, we check if each batch is blank. If so, we are done. \n    while ((allAlbums.length % 50) === 0){\n      let response = await fetch(`https://api.spotify.com/v1/me/albums?offset=${offset}&limit=50`, GEToptions())\n      let albums = await response.json()\n      if (albums.items.length === 0){break}\n      allAlbums = allAlbums.concat(albums.items)\n      offset += 50\n    } \n\n    //process the complete album list\n    handleAlbums(allAlbums)\n  }\n\n  const handleAlbums = (rawAlbumList) => {\n    let albumList = rawAlbumList.map(item => {\n      return {\n        name: item.album.name,\n        image: item.album.images[0].url,\n        popularity: item.album.popularity,\n        id: item.album.id\n      } \n    })\n    setUserAlbums(albumList)\n  }\n\n  return (\n    //if there is no code stored, then the user must have not have logged in, or has refused to grant access, so show them a 'connect' button\n    //else, they must have logged in, so show the app\n    code===null\n    ? <Splashscreen clientId={clientId} redirect={redirect}/>\n    : <div className=\"App\">\n        <Welcome userDisplayName={userDisplayName} userProfileUrl={userProfileUrl}/>\n        <button style={{'margin': '3%'}} onClick={getUserAlbums}>Get Albums!</button>\n        <AlbumList userAlbums={userAlbums}/>\n      </div>\n  )  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}