{"version":3,"sources":["components/Splashscreen/Splashscreen.js","components/SongView/SongView.js","components/AlbumView/AlbumView.js","components/DetailOverlay/DetailOverlay.js","components/Welcome/Welcome.js","components/AlbumCard/AlbumCard.js","components/AlbumList/AlbumList.js","components/LibraryView/LibraryView.js","App.js","index.js"],"names":["Splashscreen","props","clientId","redirect","className","style","onClick","window","location","replace","SongView","loadedSong","clearSong","name","cursor","AlbumView","loadedAlbum","clearAlbum","getSongInfo","map","item","id","DetailOverlay","isSongLoaded","Welcome","userProfileUrl","userDisplayName","AlbumCard","image","popularity","getAlbumTracks","src","alt","AlbumList","userAlbums","useEffect","console","log","popColor","pops","document","getElementsByClassName","i","length","score","Number","innerHTML","color","display","flexWrap","justifyContent","album","LibraryView","App","useState","code","setCode","token","setToken","setRefreshToken","setExpiry","setRequestTime","setUserDisplayName","setUserProduct","setUserProfileUrl","setUserAlbums","setLoadedAlbum","setIsSongLoaded","setLoadedSong","GEToptions","inputToken","method","headers","particlesConfig","require","search","parseUrl","recievedCode","URLSearchParams","get","getAccessToken","a","fetch","body","JSON","stringify","rawResponse","json","response","Date","expires_in","access_token","refresh_token","getUserDataOnInit","e","user","display_name","product","external_urls","spotify","getUserAlbums","allAlbums","offset","albums","items","concat","handleAlbums","rawAlbumList","albumList","images","url","songId","songName","features","albumId","clear","rawTracks","tracks","track","duration_ms","link","getElementsByTagName","overflow","classList","add","params","remove","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.11d2195c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Splashscreen = (props) => {\n\nconst { clientId, redirect } = props\n\n  return(\n    <div className=\"App\">\n        <button style={{'margin': '10%'}} onClick={()=>window.location.replace(`https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirect}&show_dialog=false&scope=user-read-private%20user-library-read`)}>Connect to Spotify!</button>\n    </div>\n  )\n}\n\nexport default Splashscreen\n","import React from 'react'\nimport './SongView.css'\n\nconst SongView = (props) => {\n\n  const { loadedSong, clearSong } = props\n\n  return(\n    <div >\n      <h1 className={'test'}>{loadedSong.name}</h1>\n      <p className={'test'}>This is the song details</p>\n      <div className={'btn-to-alb-view test'} style={{cursor: 'pointer'}} onClick={clearSong}>\n        BACK\n      </div>\n    </div>\n  )\n}\n\nexport default SongView","import React from 'react';\nimport './AlbumView.css';\n\nconst AlbumView = (props) => {\n  \nconst { loadedAlbum, clearAlbum, getSongInfo } = props\n\n  return (\n    <div className=\"album-tracks\">\n      <div className={'back-btn-to-lib track text-center grow'} onClick={clearAlbum}>\n        BACK\n      </div>\n      \n      {loadedAlbum.map(item => {\n        return <div key={item.id} onClick={()=>{getSongInfo(item.id, item.name)}} className='track text-center grow'>\n                {item.name}  <br />\n               </div>\n      })}\n      \n    </div>\n  )\n\n}\n\nexport default AlbumView","import React from 'react'\nimport SongView from '../SongView/SongView.js';\nimport AlbumView from '../AlbumView/AlbumView.js';\nimport './DetailOverlay.css'\n\nconst DetailOverlay = (props) => {\n\n  const {isSongLoaded, loadedSong, loadedAlbum, getSongInfo, clearAlbum, clearSong } = props\n\n  return(\n    <div className={'overlay hide'}>\n      {isSongLoaded\n      ? <SongView loadedSong={loadedSong} clearSong={clearSong}/>\n      : <AlbumView loadedAlbum={loadedAlbum} getSongInfo={getSongInfo} clearAlbum={clearAlbum}/>\n      }      \n    </div>\n  )\n}\n\nexport default DetailOverlay","import React from 'react';\nimport './Welcome.css'\n\n\n\nconst Welcome = (props) => {\n\n  // eslint-disable-next-line\n  const { userProfileUrl, userDisplayName } = props\n\n  return(\n      <div className='welcome'>\n        <h1 className={'fade-in'}>\n          Welcome, {userDisplayName}.<br />\n        </h1>\n      </div>\n  )\n}\n\nexport default Welcome","import React from 'react';\nimport './AlbumCard.css'\n\nconst AlbumCard = (props) => {\n\nconst { id, name, image, popularity, getAlbumTracks } = props\n\n  return(\n    <div onClick={()=>{getAlbumTracks(id)}} className=\"card grow br2 ba dark-gray b--black-10 mv2 mv4-ns w-50 ma3-ns w-20-ns center\">\n      <img  src={image} className=\"db w-100 br2 br--top image\" alt=\"Album art\"/>\n      <div className=\"pa2 ph3-ns pb3-ns background \">\n        <div className=\"dt w-100 mt1 \">\n          <div className=\"dtc w-90 \">\n            <h1 className=\"f5 f4-ns mv0 white\">{name}</h1>\n          </div>\n          <div className=\"dtc tr w-10\">\n            <h2 className=\"f5 mv0 popularity\">{popularity}</h2>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AlbumCard\n","import { React, useEffect } from 'react';\nimport AlbumCard from '../AlbumCard/AlbumCard.js';\nimport './AlbumList.css';\n\nconst AlbumList = (props) => {\n\nconst { userAlbums, getAlbumTracks} = props;\n\nuseEffect(()=>{\n  console.log('useeffect ran on album list')\n  if (userAlbums){popColor()}\n})\n\n//run through the album cards and set the color of the popularity text based on score\nconst popColor = () => {\n  //set thresholds\n  const high = 75\n  const low = 25\n  let pops = document.getElementsByClassName('popularity')\n\n  for (let i=0; i<pops.length; i++){\n    let score = Number(pops[i].innerHTML)\n    if (score >= high){pops[i].style.color = \"green\"}\n    else if (score >= low){pops[i].style.color = \"darkorange\"}\n    else {pops[i].style.color = \"red\"}  \n  }\n}\n\n//if there are albums loaded, loop through them and display a card for each\n//if not, do nothing\nif (userAlbums) {\n    return(\n        <div className={`album-list animate`} style={{display: 'flex',flexWrap: 'wrap',justifyContent: 'space-around'}}>\n            {userAlbums.map(album => {\n                return <AlbumCard key={album.id} id={album.id} name={album.name} image={album.image} popularity={album.popularity} getAlbumTracks={getAlbumTracks}/>\n            })}\n            \n        </div>\n        \n    )\n} else {\n    return(null)\n  } \n}\n\nexport default AlbumList","import React from 'react'\nimport Welcome from '../Welcome/Welcome.js';\nimport AlbumList from '../AlbumList/AlbumList.js';\n\nconst LibraryView = (props) => {\n\n  const { userDisplayName, userProfileUrl, userAlbums, getAlbumTracks } = props\n\n  return(\n    <div className={'library-view'}>\n      <Welcome userDisplayName={userDisplayName} userProfileUrl={userProfileUrl}/>\n      <AlbumList userAlbums={userAlbums} getAlbumTracks={getAlbumTracks}/>        \n    </div>\n  )\n}\n\nexport default LibraryView","import { useState, useEffect } from 'react';\nimport Splashscreen from './components/Splashscreen/Splashscreen.js';\nimport DetailOverlay from './components/DetailOverlay/DetailOverlay.js';\nimport LibraryView from './components/LibraryView/LibraryView.js';\nimport Particles from 'react-particles-js';\nimport './App.css';\nimport 'tachyons';\n\nconst clientId = 'ebcbc13ca3b34ed6a4cf0bf4d7579df9';\nconst redirect = 'https%3A%2F%2Fwww.jamescockayne.co.uk%2Fspotify-app%2F';\n\nconst App = () => {\n\n  //hooks for state\n  const [code, setCode] = useState(null)\n  const [token, setToken] = useState(null) // eslint-disable-next-line \n  const [refreshToken, setRefreshToken] = useState(null) // eslint-disable-next-line \n  const [expiry, setExpiry] = useState(null) // eslint-disable-next-line \n  const [requestTime, setRequestTime] = useState(null)\n  const [userDisplayName, setUserDisplayName] = useState('Loading...') // eslint-disable-next-line \n  const [userProduct, setUserProduct] = useState(null)\n  const [userProfileUrl, setUserProfileUrl] = useState(null)\n  const [userAlbums, setUserAlbums] = useState(null)\n  const [loadedAlbum, setLoadedAlbum] = useState([])\n  const [isSongLoaded, setIsSongLoaded] = useState(false)\n  const [loadedSong, setLoadedSong] = useState({})\n\n  //global options parameter for GET requests, take a token, and return an object with the right header\n  //defaults to using the token from app state, but can be custom\n  const GEToptions = (inputToken = token) => {\n    return ({\n      method: 'GET',\n      headers: {'Authorization': `Bearer ${inputToken}`}\n    })\n  }\n\n  //parameters for the particles background\n  const particlesConfig = require('./particlesjs-config.json')\n\n  //request for the url to be parsed if there is a query string on page load\n  useEffect(() => {\n    (window.location.search !== \"\")?parseUrl():console.log('Please link with Spotify') // eslint-disable-next-line\n  },[])\n\n  //grab the code parameter from the query string and pass it to getAccessToken()\n  const parseUrl = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const recievedCode = urlParams.get('code')\n    setCode(recievedCode)\n    getAccessToken(recievedCode)\n  }\n\n  //send the code to the backend and update the state with the results\n  const getAccessToken = async (recievedCode) => {\n    let rawResponse = await fetch('https://spotify-test-project.herokuapp.com', {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        code: recievedCode,\n        clientId: clientId,\n        redirect: redirect\n      })\n    })\n\n    let response = await rawResponse.json()\n\n    try {\n      setRequestTime(new Date())\n      setExpiry(response.expires_in)\n      setToken(response.access_token)\n      setRefreshToken(response.refresh_token) \n      //get the user's profile with the token we just recieved, because the default value of token here comes back as blank\n      getUserDataOnInit(response.access_token)  \n    } catch(e){console.log(e)}\n  }\n\n  //make a request for profile data and update state with basic details\n  const getUserDataOnInit = async (inputToken) => {\n    try {\n      let response = await fetch('https://api.spotify.com/v1/me', GEToptions(inputToken))\n      let user = await response.json()  \n      setUserDisplayName(user.display_name)\n      setUserProduct(user.product)\n      setUserProfileUrl(user.external_urls.spotify)\n      getUserAlbums(inputToken)\n    } catch(e){console.log(e)}  \n\n  }\n\n  const getUserAlbums = async (inputToken) => {\n    //start with no albums, and make the first request from offset=0\n    let allAlbums = []\n    let offset = 0\n\n    //spotify limits album requests to 50 at a time, so...\n    //if the number of albums recieved so far is a multiple of 50, make another request for the next 50, by specifying the offset\n    //Eventually the albums stop coming in 50s and we are done\n    //For the edge case that the final number required is a multiple of 50, we check if each batch is blank. If so, we are done. \n    while ((allAlbums.length % 50) === 0){\n      let response = await fetch(`https://api.spotify.com/v1/me/albums?offset=${offset}&limit=50`, GEToptions(inputToken))\n      let albums = await response.json()\n      if (albums.items.length === 0){break}\n      allAlbums = allAlbums.concat(albums.items)\n      offset += 50\n    } \n\n    //process the complete album list\n    handleAlbums(allAlbums)\n  }\n\n  const handleAlbums = (rawAlbumList) => {\n    let albumList = rawAlbumList.map(item => {\n      return {\n        name: item.album.name,\n        image: item.album.images[0].url,\n        popularity: item.album.popularity,\n        id: item.album.id\n      } \n    })\n    setUserAlbums(albumList)\n  }\n\n  const getSongInfo = async (songId, songName) => {\n    console.log('getting song info for id: ', songId)\n    let response = await fetch(`https://api.spotify.com/v1/audio-features/${songId}`, GEToptions())\n    let features = await response.json()\n    features.name = songName\n    setLoadedSong(features)\n    setIsSongLoaded(true)\n  }\n\n  const getAlbumTracks = async (albumId) => {\n    console.log('running getAlbumTracks()')\n    console.clear()\n\n    //make the request for the album whose id has been passed\n    let response = await fetch(`https://api.spotify.com/v1/albums/${albumId}/tracks`, GEToptions())\n    let rawTracks = await response.json()\n\n    //process the response into a simpler array\n    let tracks = rawTracks.items.map(track => {\n      return {\n        name: track.name,\n        length: track.duration_ms,\n        id: track.id,\n        link: track.external_urls.spotify\n      }\n    })\n    setLoadedAlbum(tracks)\n    document.getElementsByTagName('body')[0].style.overflow = 'hidden' \n    document.getElementsByClassName('overlay')[0].classList.add('show')\n  }\n\n  //hide the overlay to go back to library view\n  const clearAlbum = () => {\n    document.getElementsByClassName('overlay')[0].classList.remove('show')\n    document.getElementsByTagName('body')[0].style.overflow = 'visible'\n  }\n\n  const clearSong = () => {\n    setIsSongLoaded(false)\n  }\n\n  //if there is no code stored, then the user must have not have logged in, or has refused to grant access, so show them a 'connect' button\n  //else, they must have logged in, so show the app\n  return (\n    <div>\n      <Particles params={particlesConfig} className='particles'/>\n      {(code===null)\n        ? <Splashscreen clientId={clientId} redirect={redirect}/>\n        : <div className=\"App\">\n            <DetailOverlay isSongLoaded={isSongLoaded} loadedSong={loadedSong} loadedAlbum={loadedAlbum} getSongInfo={getSongInfo} clearAlbum={clearAlbum} clearSong={clearSong}/>\n            <LibraryView userDisplayName={userDisplayName} userProfileUrl={userProfileUrl} userAlbums={userAlbums} getAlbumTracks={getAlbumTracks}/> \n          </div>     \n      }   \n    </div>\n  )  \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}